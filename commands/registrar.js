const r_eletro = "944299045042679838",
  r_edifica = "944299270683631636",
  r_eventos = "944299148583264346",
  r_secret = "944299200177373265";

const request = require("request");
const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

const oneButton = new MessageButton({ style: 'SUCCESS', customId: "oneId", label: "1Â°" });
const twoButton = new MessageButton({ style: 'SUCCESS', customId: "twoId", label: "2Â°" });
const threeButton = new MessageButton({ style: 'SUCCESS', customId: "threeId", label: "3Â°" });
const formadoButton = new MessageButton({ style: 'SUCCESS', customId: "formadoId", label: "Formado", emoji: "ðŸŽ“" });
const notButton = new MessageButton({ style: 'DANGER', customId: "notId", label: "NÃ£o faÃ§o parte do IFMT" });
const doButton = new MessageButton({ style: 'SUCCESS', customId: "doId", label: "FaÃ§o parte do IFMT" });
const eletro = new MessageButton({ style: 'SUCCESS', customId: "eletro", label: "EletrotÃ©cnico/EletrÃ´nica" });
const edificacao = new MessageButton({ style: 'SUCCESS', customId: "edificao", label: "EdificaÃ§Ãµes" });
const eventos = new MessageButton({ style: 'SUCCESS', customId: "eventos", label: "Eventos" });
const secrt = new MessageButton({ style: 'SUCCESS', customId: "secrt", label: "Secretariado" });
const info = new MessageButton({ style: 'SUCCESS', customId: "info", label: "InformÃ¡tica" });

module.exports = {
  name: "registrar",
  description: "Registra o aluno no servidor de acordo com o nome ou nÃºmero de matrÃ­cula.",
  options: [{
    name: "aluno",
    description: "MatrÃ­cula ou nome completo do aluno que estÃ¡ se registrando.",
    type: "STRING",
    required: true
  }],
  async execute(client, interaction, message) {
    let type = "";
    if (interaction !== null) {
      (isNaN(Number(interaction.options.getString("aluno")))) ? type = "nome" : type = "matricula";
    } else {
      (isNaN(Number(message.content.replace(`<@${client.user.id}>`, "")))) ? type = "nome" : type = "matricula";
    };

    let guild = client.guilds.cache.get("484178304266403841")
    let member = await guild.members.fetch(interaction?.user.id ?? message.author.id);

    let search = interaction !== null ? interaction.options.getString("aluno") : message.content.replace(`<@${client.user.id}>`, "");
    request(`https://dados.ifmt.edu.br/api/3/action/datastore_search?resource_id=96f114e2-58f9-4f59-9c44-f59814c0b264&q={"${type}":"${encodeURI(search)}"}`,Â functionÂ (error,Â response,Â body)Â {
      if (JSON.parse(body).result.total < 1) {
        let send = interaction || message;
        send.reply({ fetchReply: true, content: "NÃ£o achei ninguÃ©m no banco de dados! Tente usar o nome completo ou o nÃºmero de matrÃ­cula. Se vocÃª faz parte do IFMT e nÃ£o estÃ¡ no banco de dados (isso acontece porque o banco de dados pode nÃ£o estar atualizado no momento), clique no botÃ£o \"faÃ§o parte do IFMT\", e se vocÃª nÃ£o faz parte do IFMT, clique no botÃ£o \"nÃ£o faÃ§o parte do IFMT\".", components: [new MessageActionRow({components: [doButton, notButton]})] })
        .then(notMsg => {
          let collectorUser = interaction?.user.id ?? message.author.id;
          const collector = notMsg.createMessageComponentCollector({ filter: ({user}) => user.id === collectorUser });
          collector.on('collect', async interactionButton => {
            if (interactionButton.customId == "doId") {
              if (type == "matricula") return interactionButton.reply("Por favor, rode o comando novamente com o seu nome completo.");              
              let aluno = interaction?.options.getString("aluno") ?? message.content.replace(`<@${client.user.id}>`, "");
              interactionButton.reply({ fetchReply: true, content:`Bem-vindo, ${aluno}! Por favor, selecione o seu curso atual.`, components: [new MessageActionRow({components: [eletro, edificacao, eventos, secrt, info]})]}).then(msg => {
                const collector1 = msg.createMessageComponentCollector({ filter: ({user}) => user.id === collectorUser })
                collector1.on('collect', async interactionButton_ => {
                  if (interactionButton_.customId == "info") {
                    interactionButton_.reply({ fetchReply: true, content:`Bem-vindo, ${aluno}! Por favor, selecione o ano que estÃ¡ cursando.`, components: [new MessageActionRow({components: [oneButton, twoButton, threeButton, formadoButton]})]}).then(msgCurso => {
                      const collector2 = msgCurso.createMessageComponentCollector({ filter: ({user}) => user.id === collectorUser })
                      collector2.on('collect', async interactionButton__ => {
                        let role;
                        switch (interactionButton__.customId) {
                          case "oneId":
                            role = "936824421874806885";
                            break;
                          case "twoId":
                            role = "936824477902311435";
                            break;
                          case "threeId":
                            role = "936824532923203595";
                            break;
                          case "formadoId":
                            role = "944670173779099699";
                            break;
                        };

                        member.roles.add(role, `${aluno} se registrou no servidor.`).then(() => {
                          member.setNickname(`${aluno.split(" ")[0]}${aluno.split(" ")[1]}`, `${aluno} se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
                          interactionButton__.reply("Tudo certo! VocÃª acabou de receber o cargo referente ao ano em que estÃ¡ cursando para vocÃª acessar o servidor.");
                        }).catch(e => {
                          interactionButton__.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
                        });
                      });
                    });
                  } else {
                    let role;
                    switch (interactionButton_.customId) {
                      case "eletro":
                        role = r_eletro;
                        break;
                      case "edificacao":
                        role = r_edifica;
                        break;
                      case "eventos":
                        role = r_eventos;
                        break;
                      case "secrt":
                        role = r_secret;
                        break;
                    };

                    member.roles.add(role, `${aluno} (${interactionButton.label}) se registrou no servidor.`).then(() => {
                      member.setNickname(`${aluno.split(" ")[0]}${aluno.split(" ")[1]}`, `${aluno} (${interactionButton.label}) se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
                      interactionButton_.reply("Tudo certo! VocÃª acabou de receber o cargo referente ao seu curso atual para vocÃª acessar o servidor.");
                    }).catch(e => {
                      interactionButton_.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
                      //throw e;
                    });
                  };
                  return;
                });
              });
            } else {
              let aluno = interaction?.options.getString("aluno") ?? message.content.replace(`<@${client.user.id}>`, "")
              if (aluno.replace(`<@${client.user.id}`, "") == "") return interactionButton.reply("Por favor, rode o comando novamente com o seu nome completo.");
              member.roles.add("936825982474657832", `${aluno.replace(`<@${client.user.id}`, "")} (nÃ£o faz parte do IFMT) se registrou no servidor.`).then(() => {
                member.setNickname(`${aluno.replace(`<@${client.user.id}`, "").split(" ")[0]}${aluno.replace(`<@${client.user.id}`, "").split(" ")[1]}`, `${aluno.replace(`<@${client.user.id}`, "")} (nÃ£o faz parte do IFMT) se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
                interactionButton.reply("Como vocÃª nÃ£o faz parte do IFMT, vocÃª agora tem acesso ao servidor com um cargo especial.");
              }).catch(e => {
                interactionButton.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
                //throw e;
              });
            };
          });
        });
        return;
      } else if (JSON.parse(body).result.total > 1) {
        let send = interaction || message;
        return send.reply({ fetchReply: true, content: "Encontrei mais de 1 resultado na pesquisa, insira o seu nome completo ou o nÃºmero de matrÃ­cula para ser mais preciso. Se vocÃª nÃ£o faz parte do IFMT, clique no botÃ£o abaixo.", components: [new MessageActionRow({components: [notButton]})] }).then(msgGreater => {
          let collectorUser = interaction?.user.id ?? message.author.id;
          const collector2 = msgGreater.createMessageComponentCollector({ filter: ({user}) => user.id === collectorUser });
          collector2.on('collect', async interactionButton => {
            let aluno = interaction?.options.getString("aluno") ?? message.content.replace(`<@${client.user.id}>`, "")
            if (aluno.replace(`<@${client.user.id}`, "") == "") return interactionButton.reply("Por favor, rode o comando novamente com o seu nome completo.");
            member.roles.add("936825982474657832", `${aluno.replace(`<@${client.user.id}`, "")} (nÃ£o faz parte do IFMT) se registrou no servidor.`).then(() => {
              member.setNickname(`${aluno.replace(`<@${client.user.id}`, "").split(" ")[0]}${aluno.replace(`<@${client.user.id}`, "").split(" ")[1]}`, `${aluno.replace(`<@${client.user.id}`, "")} (nÃ£o faz parte do IFMT) se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
              interactionButton.reply("Como vocÃª nÃ£o faz parte do IFMT, vocÃª agora tem acesso ao servidor com um cargo especial.");
            }).catch(e => {
              interactionButton.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
              //throw e;
            });
          });
        });
      };

      let result = JSON.parse(body).result.records[0];

      if (result.campus !== "CBA") {
        member.roles.add("936825982474657832", `${result.nome} (nÃ£o faz parte do campus) se registrou no servidor.`).then(() => {
          member.setNickname(`${result.nome.split(" ")[0]}${result.nome.split(" ")[1]}`, `${result.nome} (nÃ£o faz parte do campus) se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
          interaction?.reply("Eu detectei que vocÃª, " + result.nome + ", nÃ£o faz parte do campus CuiabÃ¡, sendo assim, vocÃª recebeu um cargo especial para ter acesso ao servidor.") ?? message.reply("Eu detectei que vocÃª nÃ£o faz parte do campus de CuiabÃ¡, sendo assim, vocÃª recebeu um cargo especial para ter acesso ao servidor.");
        }).catch(e => {
          interaction?.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.") ?? message.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
          //throw e;
        });
        return;
      };
      
      if (result.curso !== "TÃ©cnico em InformÃ¡tica - Integrado") {
        let detect;
        switch (result.curso) {
          case "TÃ©cnico em EletrotÃ©cnica - Integrado":
            detect = r_eletro;
            break;
          case "TÃ©cnico em EletroeletrÃ´nica - Integrado":
            detect = r_eletro;
            break;
          case "TÃ©cnico em EletrÃ´nica - Integrado":
            detect = r_eletro;
            break;
          case "TÃ©cnico em EdificaÃ§Ãµes - Integrado":
            detect = r_edifica;
            break;
          case "TÃ©cnico em Secretariado - Integrado":
            detect = r_secret;
            break;
          case "TÃ©cnico em Eventos - Integrado":
            detect = r_eventos;
            break;
        };

        if (detect) {
          let send = interaction || message;
          member.roles.add(detect, `${result.nome} se registrou no servidor.`).then(() => {
            member.setNickname(`${result.nome.split(" ")[0]}${result.nome.split(" ")[1]}`, `${result.nome} se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
            send.reply({ fetchReply: true, content: "Tudo certo, " + result.nome + "! VocÃª acabou de receber o cargo referente ao seu curso atual para vocÃª acessar o servidor. Se nÃ£o for vocÃª e vocÃª nÃ£o faz parte do IFMT, clique no botÃ£o abaixo, caso vocÃª fizer parte do IFMT e nÃ£o for vocÃª, rode o comando novamente usando sua matrÃ­cula ou nome completo para ter mais precisÃ£o.", components: [new MessageActionRow({components: [notButton]})] }).then(msgN => {
              let collectorUser = interaction?.user.id ?? message.author.id;
              const collector2 = msgN.createMessageComponentCollector({ filter: ({user}) => user.id === collectorUser });
              collector2.on('collect', async interactionButton => {
                let aluno = interaction?.options.getString("aluno") ?? message.content.replace(`<@${client.user.id}>`, "")
                if (aluno.replace(`<@${client.user.id}`, "") == "") return interactionButton.reply("Por favor, rode o comando novamente com o seu nome completo.");
                member.roles.add("936825982474657832", `${aluno.replace(`<@${client.user.id}`, "")} (nÃ£o faz parte do IFMT) se registrou no servidor.`).then(() => {
                  member.setNickname(`${aluno.replace(`<@${client.user.id}`, "").split(" ")[0]}${aluno.replace(`<@${client.user.id}`, "").split(" ")[1]}`, `${aluno.replace(`<@${client.user.id}`, "")} (nÃ£o faz parte do IFMT) se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
                  interactionButton.reply("Como vocÃª nÃ£o faz parte do IFMT, vocÃª agora tem acesso ao servidor com um cargo especial.");
                }).catch(e => {
                  interactionButton.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
                  //throw e;
                });
              });
            });
          }).catch(e => {
            send.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
            //throw e;
          });
          return;
        };
        
        let send = interaction || message;
        send.reply({ fetchReply: true, content: "NÃ£o consegui detectar seu curso, por favor, escolha o seu curso atual.", components: [new MessageActionRow({components: [eletro, edificacao, eventos, secrt]})] }).then(msg => {
          let collectorUser = interaction?.user.id ?? message.author.id;
          const collector = msg.createMessageComponentCollector({ filter: ({user}) => user.id === collectorUser })
          collector.on('collect', async interactionButton => {
            let role;
            switch (interactionButton.customId) {
              case "eletro":
                role = r_eletro;
                break;
              case "edificacao":
                role = r_edifica;
                break;
              case "eventos":
                role = r_eventos;
                break;
              case "secrt":
                role = r_secret;
                break;
            };
            
            member.roles.add(role, `${result.nome} se registrou no servidor.`).then(() => {
              member.setNickname(`${result.nome.split(" ")[0]}${result.nome.split(" ")[1]}`, `${result.nome} se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
              interactionButton.reply("Tudo certo! VocÃª acabou de receber o cargo referente ao seu curso atual para vocÃª acessar o servidor.");
            }).catch(e => {
              interactionButton.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
              //throw e;
            });
          });
        });
        return;
      };

      let serieAtual = new Date().getFullYear() - Number(result.matricula.substring(0,4)) + 1;
      switch (serieAtual) {
        case 1:
          twoButton.setDisabled(true), threeButton.setDisabled(true), formadoButton.setDisabled(true);
          break;
        case 2:
          threeButton.setDisabled(true), formadoButton.setDisabled(true);
          break;
        case 3:
          formadoButton.setDisabled(true);
          break;
      };

      let send = interaction || message;
      send.reply({ fetchReply: true, content:`Bem-vindo, ${result.nome}! Por favor, selecione o ano em que estÃ¡ cursando.`, components: [new MessageActionRow({components: [oneButton, twoButton, threeButton, formadoButton, notButton]})]}).then(msg => {
        let collectorUser = interaction?.user.id ?? message.author.id;
        const collector = msg.createMessageComponentCollector({ filter: ({user}) => user.id === collectorUser })
        collector.on('collect', async interactionButton => {
          let role;
          switch (interactionButton.customId) {
            case "oneId":
              role = "936824421874806885"; // 1Âº ano.
              break;
            case "twoId":
              role = "936824477902311435"; // 2Âº ano.
              break;
            case "threeId":
              role = "936824532923203595"; // 3Âº ano.
              break;
            case "formadoId":
              role = "944670173779099699";
              break;
          };

          if (interactionButton.customId == "notId") {
            let aluno = interaction?.options.getString("aluno") ?? message.content.replace(`<@${client.user.id}>`, "")
            member.roles.add("936825982474657832", `${aluno} (nÃ£o faz parte do IFMT) se registrou no servidor.`).then(() => {
              member.setNickname(`${aluno.replace(`<@${client.user.id}`, "").split(" ")[0]}${aluno.replace(`<@${client.user.id}`, "").split(" ")[1]}`, `${aluno.replace(`<@${client.user.id}`, "")} (nÃ£o faz parte do IFMT) se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
              interactionButton.reply("Como vocÃª nÃ£o faz parte do IFMT, vocÃª agora tem acesso ao servidor com um cargo especial.");
            }).catch(e => {
              interactionButton.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
              //throw e;
            });
            return;
          };

          member.roles.add(role, `${result.nome} se registrou no servidor.`).then(() => {
            member.setNickname(`${result.nome.split(" ")[0]}${result.nome.split(" ")[1]}`, `${result.nome} se registrou no servidor.`).catch(() => console.log(`NÃ£o consegui mudar o nickname do ${member.id}.`));
            interactionButton.reply("Tudo certo! VocÃª acabou de receber o cargo referente ao ano em que estÃ¡ cursando para vocÃª acessar o servidor.");
          }).catch(e => {
            interactionButton.reply("Algo deu errado ao tentar dar o cargo, contate um administrador.");
            //throw e;
          });
        });
      });
    });
  }
};